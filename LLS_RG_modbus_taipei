#!/usr/bin/env python
#
# Device 1
# Available device: Liquid level sensor
# Manufacturer: AQUAS Inc.
# Product number: SMR02
# Serial communication protocol: RS485
# Purpose:
# Measure ground water level every 10 mins (Unit in meter)
# Address of slave: 1

# Device 2 
# Aailable device: Tipping-bucket Rain gauge
# Product number: SMR29-C
# Serial communication protocol: RS485
# Purpose:
# Measure rainfall intensity every 10 mins (Unit in mm/hr)
# Address of slave: 2

# Including
from statistics import median
import minimalmodbus
import time
import schedule
from time import gmtime, strftime
# from urllib.request import urlopen
from urllib2 import urlopen

# Definition of variable
minimalmodbus.BAUDRATE = 19200
wL_slaveAddr = 1
rg_slaveAddr = 2

devName = '/dev/ttyUSB0' # RPI    format
comName = 'COM5'         # Window format
rg_id_No = "8001" # Songde North: 8001
wL_id_No = "6001" # Songde North: 6001 # Songde South: 6002

rg_countNum_Loop   = -1
rg_countNum_Loop_2 = -1
countNum_Loop = -1

countVal  = 0
bucketVal = 0.2  # Unit in mm
rfInts    = 0    # Unit in mm/hr
rfDep     = 0    # Unit in mm

start = time.time()

def wLRead(slp,intcpt): 
    # Port name, slave address (in decimal)
    # instrument_wL = minimalmodbus.Instrument(comName, wL_slaveAddr)
    instrument_2 = minimalmodbus.Instrument(devName, wL_slaveAddr)
    try:
        samplingList = []
        medianVal = 0
        countNum  = 0
        sampleNum = 10
        while (countNum <= sampleNum): 
            # Register address / Number of registers / Function code
            ReadingValue = instrument_wL.read_registers(0,2,4)
            power = len(str(ReadingValue[0]))
            ArrangeValue = ReadingValue[1] + ReadingValue[0]/(10**power)
            samplingList.append(ArrangeValue)
            countNum += 1
            #print(countNum)
            time.sleep(1) # Wait for 1 second
            
        medianVal = median(samplingList)
        wLVal     = round(slp * medianVal + intcpt, 3)
        
        idn = instrument_wL.read_register(1, 0, 3)
        print('-----Liquid level sensor-----')
        # print('id = '+str(idn))
        print('water level = ' + str(wLVal) + ' m')                
             
    except IOError:
        wLVal = 0
        print("Failed to read from instrument")
        print('------------------------')
        
    return wLVal

def rfDepRead():
    global befVal, countVal, rg_countNum_Loop_2, rfDep
    # Port name, slave address (in decimal)
    # instrument_2 = minimalmodbus.Instrument(comName, rg_slaveAddr)
    instrument_2 = minimalmodbus.Instrument(devName, rg_slaveAddr)

    try:
        # Register number, number of decimals, function code
        rf_realVal = instrument_2.read_register(0, 0, 4)
        print("Read value 0:", rf_realVal)
        rf_refVal   = [0, 13107, 26215, 39322, 52429]
        boolTemp1   = rf_realVal in rf_refVal
        
        # Because the first time reading the value 
        # from Modbus is always zero.
        # ------------------------ #
        while (rg_countNum_Loop_2 < 0):
            befVal = rf_realVal
            # print("Read value 1:", rf_realVal)
            # print("Previous value 1:", befVal)
            # print('------------------------')
            rg_countNum_Loop_2 += 1
            break
        # ------------------------ #
        
        if boolTemp1 and (rf_realVal != befVal):
            # print("Detect additional rainfall")        
            # print("Read value 2:", rf_realVal)
            # print("Previous value 2:", befVal)            
            # print('------------------------')
            befVal = rf_realVal
            countVal += 1
            rfDep = countVal * bucketVal
            
        else:
            boolTemp1 = not boolTemp1
            # print("Read value 3:", rf_realVal)
            # print("Previous value 3:", befVal)            
            # print('------------------------')
            befVal = rf_realVal
            
        print("Additional rainfall (T/F):",boolTemp1) 
        print('------------------------')

    except IOError:
        print("Failed to read from instrument")
        print('------------------------')    
    return rfDep

def httpPOST(String0, String1, String2, String3):    
    try:
        global timeStamp
        timeStamp = strftime("%Y%m%d%H%M%S")
        url = 'http://ec2-54-175-179-28.compute-1.amazonaws.com/update_general.php?' + \
              'site=Demo&' + \
              'time='+ str(timeStamp)+ \
              '&weather=0' + \
              '&id='+ str(String0) + \
              '&air=0' + \
              '&acceleration=0' + \
              '&cleavage=0' + \
              '&incline=0' + \
              '&field1='+str(String1)+ \
              '&field2='+str(String2)+ \
              '&field3='+repr(String3)
        
        url_TT ='http://data.thinktronltd.com/TCGEMSIS/GETMTDATA.aspx?' + \
              'site=Demo&' + \
              'time='+ str(timeStamp)+ \
              '&weather=0' + \
              '&id='+ str(String0) + \
              '&air=0' + \
              '&acceleration=0' + \
              '&cleavage=0' + \
              '&incline=0' + \
              '&field1='+str(String1)+ \
              '&field2='+str(String2)+ \
              '&field3='+repr(String3) 
        
        resp = urlopen(url).read()
        resp_TT = urlopen(url_TT).read()
        print(resp)
        print(resp_TT)
        print('------------------------')
    except:
        print('We have an error!')
        time.sleep(30) # Wait for 30 sec
        resp = urlopen(url).read()
        print(resp)
        print('------------------------')
        
def RGreading():    
    global start, rg_countNum_Loop, countVal ,rfDep ,rfInts
    end = time.time()
    delSec = end - start # Unit in sec    
    rfDep = rfDepRead() # Unit in mm   

    if (rg_countNum_Loop < 0):
        httpPOST(rg_id_No, 0, 0, "Reboot")
        rg_countNum_Loop += 1        

    if (delSec - 600) > 0:  
        rfInts = rfDep/0.1666667 # Unit in mm/hr every 10 mins
        # print("Count value 1:", countVal)
        # print('Rainfall depth 1: ',rfDep,' mm') 
        # print('Rainfall intensity 1: ',rfInts,' mm/hr')
        start  = end   

        data1 = round(rfInts,3) 
        data2 = 0
        httpPOST(rg_id_No, data1, data2, 0)        
        countVal  = 0        
        rfInts    = 0
        rfDep     = 0
        # print("Upload time : %s" % timeStamp)    
        # print('------------------------')        
    else:
        print('Continuous detection.')
        print('------------------------')
        
def WLreading():
    global countNum_Loop
    slope = 0.04626
    intercept = -760.80073
    data3 = wLRead(slope, intercept)
    data4 = 0

    if (countNum_Loop < 0):
        httpPOST(wL_id_No, data3, data4, "Reboot")
        countNum_Loop += 1
    else:
        httpPOST(wL_id_No, data3, data4, 0)           


schedule.every(10).seconds.do(RGreading)  
schedule.every(600).seconds.do(WLreading)


try:
    while True:
        schedule.run_pending()
        time.sleep(1)
except:
    schedule.clear()
    minimalmodbus.CLOSE_PORT_AFTER_EACH_CALL=True
    print('------------------------')
    print("Stop")
    print('------------------------')
